import os
current_dir = os.getcwd()

keywords = ["void","int8","int16","int32","int64","uint8","uint16","uint32","uint64","float32","float64","func","public","ret","and","or","mod","xor","global","import","module"]
symbols = ["{","}","->"]

def symbolToStr(s):
    match s:
        case "}":
            return "RSquiggly"
        case "{":
            return "LSquiggly"
        case "->":
            return "Super"
    return ""

def genClass(file,template,word):
    code = template.replace("#", word)
    if word in keywords:
        word = word.capitalize()
        code = code.replace("@", word)
        code = code.replace("%", "Keyword")
    elif word in symbols:
        code = code.replace("@",symbolToStr(word))
        code = code.replace("%", "Symbol")
    file.write("\n")
    file.write(code)
    file.write("\n")
    
if __name__ == "__main__":
    with open(current_dir + "/LunaScriptFormatter.cs", "w") as file:
        file.write('')
        file.write("// DO NOT EDIT THIS FILE! IT IS GENERATED.\n namespace LunaScriptEXT.src.Client \n{\n\n")
        file.write("\t using System.ComponentModel.Composition;\n\t using Microsoft.VisualStudio.Text.Classification; \n\t using Microsoft.VisualStudio.Utilities;\n")
        with open(current_dir + "/ClassTemplate.txt", "r") as template:
            code = template.read()
            for word in keywords:
                genClass(file,code,word)
            for word in symbols:
                genClass(file,code,word)
        file.write("}\n")
