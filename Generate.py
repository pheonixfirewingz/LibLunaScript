import os
current_dir = os.getcwd()
source_dir = current_dir + "/tests/src"
skip = ["module_import_test_called"]


def generate_test_for_file(file_path, file):
    dir_path = os.path.dirname(file_path)
    dir_path = dir_path.replace(source_dir, '')
    dir_path = dir_path.replace('\\', '/')
    file_name = os.path.basename(file_path)
    file_name = file_name.split('.')[0]
    if file_name in skip:
        return
    print("GENERATING: " + file_name)
    code = ""
    if 'bad_syntax' in file_name:
        code += "AST_BAD_COMPILER_TEST("
    else:
        code += "AST_COMPILER_TEST("
    code += "\""
    code += dir_path
    code += "\","
    code += file_name
    code += ")\n"
    file.write(code)


def generate_tests_for_subdirectorys(subdir_path, file):
    for entry in os.scandir(subdir_path):
        if entry.is_file():
            generate_test_for_file(entry.path, file)
        elif entry.is_dir():
            generate_tests_for_subdirectorys(entry.path, file)


if __name__ == "__main__":
    with open(current_dir + "/Main.cpp", "w") as file:
        file.write('')
        file.write("// DO NOT EDIT THIS FILE! IT IS GENERATED. EDIT TEMPLATE\n")
        with open(current_dir + "/Template.cpp", "r") as padding:
            file.writelines(padding.readlines())
        file.write('\n')
        generate_tests_for_subdirectorys(source_dir, file)
